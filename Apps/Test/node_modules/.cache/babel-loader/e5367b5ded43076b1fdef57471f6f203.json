{"ast":null,"code":"import axios from \"axios\";\nconst endpointURL = \"http://localhost:4000/graphql\";\nexport async function loadJobs() {\n  const response = await fetch(endpointURL, {\n    method: \"POST\",\n    headers: {\n      \"content-type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      query: `{\n                jobs {\n                  id\n                  title\n                  \n                  company {\n                    id\n                    name\n                    \n                  }\n                }\n              }\n              \n            `\n    })\n  });\n  const responseBody = await response.json();\n  return responseBody.data.jobs;\n}\n\nasync function graphqlRequest(query, variables = {}) {\n  const response = await fetch(endpointURL, {\n    method: \"POST\",\n    headers: {\n      \"content-type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      query: query,\n      variables: variables\n    })\n  });\n  const responseBody = await response.json();\n  return responseBody.data;\n}\n\nexport async function loadJob(jobId) {\n  const query = `query JobQuery($jobId: ID!) {\n  \n        job(id: $jobId) {\n          id\n          title\n          company {\n            id\n            name\n          }\n          description\n        }\n      }`;\n  const data = await graphqlRequest(query, {\n    id\n  });\n  return data.job;\n}","map":{"version":3,"sources":["/media/zen/Bioinformatics/Oncology/Project/COS/Apps/Test/src/requests.js"],"names":["axios","endpointURL","loadJobs","response","fetch","method","headers","body","JSON","stringify","query","responseBody","json","data","jobs","graphqlRequest","variables","loadJob","jobId","id","job"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,WAAW,GAAG,+BAApB;AAEA,OAAO,eAAeC,QAAf,GAA0B;AAC/B,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,WAAD,EAAc;AACxCI,IAAAA,MAAM,EAAE,MADgC;AAExCC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAF+B;AAGxCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,MAAAA,KAAK,EAAG;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdyB,KAAf;AAHkC,GAAd,CAA5B;AAoBA,QAAMC,YAAY,GAAG,MAAMR,QAAQ,CAACS,IAAT,EAA3B;AACA,SAAOD,YAAY,CAACE,IAAb,CAAkBC,IAAzB;AACD;;AAED,eAAeC,cAAf,CAA8BL,KAA9B,EAAqCM,SAAS,GAAG,EAAjD,EAAqD;AACnD,QAAMb,QAAQ,GAAG,MAAMC,KAAK,CAACH,WAAD,EAAc;AACxCI,IAAAA,MAAM,EAAE,MADgC;AAExCC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAF+B;AAGxCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,MAAAA,KAAK,EAAEA,KADY;AAEnBM,MAAAA,SAAS,EAAEA;AAFQ,KAAf;AAHkC,GAAd,CAA5B;AAQA,QAAML,YAAY,GAAG,MAAMR,QAAQ,CAACS,IAAT,EAA3B;AACA,SAAOD,YAAY,CAACE,IAApB;AACD;;AAED,OAAO,eAAeI,OAAf,CAAuBC,KAAvB,EAA8B;AACnC,QAAMR,KAAK,GAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAXE;AAYA,QAAMG,IAAI,GAAG,MAAME,cAAc,CAACL,KAAD,EAAQ;AAAES,IAAAA;AAAF,GAAR,CAAjC;AAEA,SAAON,IAAI,CAACO,GAAZ;AACD","sourcesContent":["import axios from \"axios\";\n\nconst endpointURL = \"http://localhost:4000/graphql\";\n\nexport async function loadJobs() {\n  const response = await fetch(endpointURL, {\n    method: \"POST\",\n    headers: { \"content-type\": \"application/json\" },\n    body: JSON.stringify({\n      query: `{\n                jobs {\n                  id\n                  title\n                  \n                  company {\n                    id\n                    name\n                    \n                  }\n                }\n              }\n              \n            `,\n    }),\n  });\n  const responseBody = await response.json();\n  return responseBody.data.jobs;\n}\n\nasync function graphqlRequest(query, variables = {}) {\n  const response = await fetch(endpointURL, {\n    method: \"POST\",\n    headers: { \"content-type\": \"application/json\" },\n    body: JSON.stringify({\n      query: query,\n      variables: variables,\n    }),\n  });\n  const responseBody = await response.json();\n  return responseBody.data;\n}\n\nexport async function loadJob(jobId) {\n  const query = `query JobQuery($jobId: ID!) {\n  \n        job(id: $jobId) {\n          id\n          title\n          company {\n            id\n            name\n          }\n          description\n        }\n      }`;\n  const data = await graphqlRequest(query, { id });\n\n  return data.job;\n}\n"]},"metadata":{},"sourceType":"module"}